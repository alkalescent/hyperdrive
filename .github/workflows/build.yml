# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build Pipeline

on:
  push:
    branches: [master]

env:
  # RUN_ID is necessary for tests
  RUN_ID: ${{ github.run_id }}
  RH_USERNAME: ${{ secrets.RH_USERNAME }}
  RH_PASSWORD: ${{ secrets.RH_PASSWORD }}
  RH_2FA: ${{ secrets.RH_2FA }}
  GLASSNODE: ${{ secrets.GLASSNODE }}
  BLS: ${{ secrets.BLS }}
  BINANCE_TESTNET_KEY: ${{ secrets.BINANCE_TESTNET_KEY }}
  BINANCE_TESTNET_SECRET: ${{ secrets.BINANCE_TESTNET_SECRET }}
  KRAKEN_KEY: ${{ secrets.KRAKEN_KEY }}
  KRAKEN_SECRET: ${{ secrets.KRAKEN_SECRET }}
  POLYGON: ${{ secrets.POLYGON }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  PREF_EXCHANGE: ${{ secrets.PREF_EXCHANGE }}
  GLASSNODE_PASS: ${{ secrets.GLASSNODE_PASS }}
  ALPACA_PAPER: ${{ secrets.ALPACA_PAPER }}
  ALPACA_PAPER_SECRET: ${{ secrets.ALPACA_PAPER_SECRET }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        # pip install flake8-annotations
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest coverage interrogate mypy pydoclint[flake8] 
          # If tests run >= 30 min, try this with pytest: pytest-xdist[psutil]
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # Lint with flake8
          flake8 --style=google
          # Check for minimum docstring coverage (higher is better)
          DOC_MIN_COVERAGE=3.4
          interrogate --fail-under="${DOC_MIN_COVERAGE}"
          # Check type annotation coverage (lower is better)
          TYPE_MIN_COVERAGE=24
          mypy . --txt-report . | :
          pct=$(grep -oE "[0-9]+\.[0-9]+%" index.txt | tail -n 1 | sed 's/%//'); awk -v p="${pct}" -v min="${TYPE_MIN_COVERAGE}" 'BEGIN { exit !(p < min) }'
          echo "${pct}%"

      - uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Run all unit tests
      # If tests run >= 30 min, try this with pytest-xdist:
      # coverage run -m pytest -vv -n auto --dist=loadfile
        run: coverage run -m pytest -vv

      - name: Generate test coverage report
        run: coverage report -m -i --fail-under=95
